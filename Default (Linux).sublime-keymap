[
    {   // Normal mode by pressing "jj"
        "keys": ["j", "j"],
        "command": "_enter_normal_mode",
        "args": { "mode": "mode_insert" },
        "context": [
            // not easymotion
            { "key": "setting.easy_motion_mode", "operand": false },
            { "key": "vi_insert_mode_aware" },
        ] },

    {   // ctrl+shift+j -> swap line up
        "keys": ["ctrl+shift+k"],
        "command": "swap_line_up" },
    {   // ctrl+shift+j -> swap line up
        "keys": ["ctrl+shift+j"],
        "command": "swap_line_down" },

    {   // Insert mode navigation with ctrl+h
        "keys": ["ctrl+h"],
        "command": "move",
        "args": { "by": "characters", "forward": false },
        "context": [ { "key": "vi_insert_mode_aware" }, ] },
    {   // Insert mode navigation with ctrl+j
        "keys": ["ctrl+j"],
        "command": "move",
        "args": { "by": "lines", "forward": true },
        "context": [ { "key": "vi_insert_mode_aware" }, ] },
    {   // Insert mode navigation with ctrl+k
        "keys": ["ctrl+k"],
        "command": "move",
        "args": { "by": "lines", "forward": false },
        "context": [ { "key": "vi_insert_mode_aware" }, ] },
    {   // Insert mode navigation with ctrl+l
        "keys": ["ctrl+l"],
        "command": "move",
        "args": { "by": "characters", "forward": true },
        "context": [ { "key": "vi_insert_mode_aware" }, ] },
    {   // Insert mode navigation with ctrl+w
        "keys": ["ctrl+w"],
        "command": "move",
        "args": { "by": "words", "forward": true },
        "context": [ { "key": "vi_insert_mode_aware" }, ] },
    {   // Insert mode navigation with ctrl+b
        "keys": ["ctrl+b"],
        "command": "move",
        "args": { "by": "words", "forward": false },
        "context": [ { "key": "vi_insert_mode_aware" }, ] },

    {   // shift+tab browse in overlay
        "keys": ["shift+tab"],
        "command": "move",
        "args": { "by": "lines", "forward": false },
        "context": [{ "key": "overlay_visible", "operand": true }] },
    {   // tab move in overlay
        "keys": ["tab"],
        "command": "move",
        "args": { "by": "lines", "forward": true },
        "context": [{ "key": "overlay_visible", "operand": true }] },

    {   // Vim movement in sidebar tree
        "keys": ["h"],
        "command": "move",
        "args": { "by": "characters", "forward": false },
        "context": [{ "key": "control", "operand": "sidebar_tree" }] },
    {   // Vim movement in sidebar tree
        "keys": ["j"],
        "command": "move",
        "args": { "by": "lines", "forward": true },
        "context": [{ "key": "control", "operand": "sidebar_tree" }] },
    {   // Vim movement in sidebar tree
        "keys": ["k"],
        "command": "move",
        "args": { "by": "lines", "forward": false },
        "context": [{ "key": "control", "operand": "sidebar_tree" }] },
    {   // Vim movement in sidebar tree
        "keys": ["l"],
        "command": "move",
        "args": { "by": "characters", "forward": true },
        "context": [{ "key": "control", "operand": "sidebar_tree" }] },

    {   // Toggle comment with divide button
        "keys": ["ctrl+keypad_divide"],
        "command": "toggle_comment",
        "args": { "block": false } },
    {   // Toggle comment shift + divide
        "keys": ["ctrl+shift+keypad_divide"],
        "command": "toggle_comment",
        "args": { "block": true } },
    {   // Toggle comment "co"
        "keys": ["c", "o"],
        "command": "toggle_comment",
        "args": { "block": false },
        "context": [{ "key": "vi_command_mode_aware" }] },

    {   // Vim scoll up and down with ctrl+U and ctrl+D
        "keys": ["ctrl+u"],
        "command": "press_key",
        "args": { "key": "<C-u>" },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // Vim scoll up and down with ctrl+U and ctrl+D
        "keys": ["ctrl+d"],
        "command": "press_key",
        "args": { "key": "<C-d>" },
        "context": [{ "key": "vi_command_mode_aware" }] },

    {   // Vim fix ctrl+v not paste
        "keys": ["ctrl+v"],
        "command": "press_key",
        "args": { "key": "<C-v>" },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // U -> soft undo
        "keys": ["U"],
        "command": "soft_undo",
        "context": [{ "key": "vi_command_mode_aware" }] },

    {   // ctrl+shift+o -> prompt open file
        "keys": ["ctrl+shift+o"],
        "command": "prompt_open_file" },
    {   // ctrl+o -> jump back
        "keys": ["ctrl+o"],
        "command": "jump_back", },
    {   // ctrl+i -> jump forward
        "keys": ["ctrl+i"],
        "command": "jump_forward", },

    {   // g 1 -> group 1
        "keys": ["g", "1"],
        "command": "focus_group",
        "args": { "group": 0 },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // g 2 -> group 2
        "keys": ["g", "2"],
        "command": "focus_group",
        "args": { "group": 1 },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // g 3 -> group 3
        "keys": ["g", "3"],
        "command": "focus_group",
        "args": { "group": 2 },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // g 4 -> group 4
        "keys": ["g", "4"],
        "command": "focus_group",
        "args": { "group": 3 },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // g 0 -> sidebar
        "keys": ["g", "0"],
        "command": "focus_side_bar",
        "context": [ {"key": "vi_command_mode_aware" } ] },

    {   // g S -> goto symbol in project.
        "keys": ["g", "S"],
        "command": "goto_symbol_in_project",
        "context": [
            {"key": "vi_command_mode_aware" }
        ] },
    {   // g s -> goto symbol in file.
        "keys": ["g", "s"],
        "command": "show_overlay",
        "args": {
            "overlay": "goto",
            "text": "@"
        },
        "context": [
            {"key": "vi_command_mode_aware" }
        ]  },
    {   // g w -> goto word
        "keys": ["g", "w"],
        "command": "show_overlay",
        "args": {
            "overlay": "goto",
            "text": "#"
        },
        "context": [
            {"key": "vi_command_mode_aware" }
        ] },
    {   // g g -> move to top
        "keys": ["g", "g"],
        "command": "press_key",
        "args": { "key": "gg" },
        "context": [
            {"key": "vi_command_mode_aware"},
        ] },
    {   // g l -> Sublimelint goto error
        "keys": ["g", "l"],
        "command": "sublimelinter_goto_error",
        "args": {"direction": "next"},
         "context": [
            {"key": "vi_command_mode_aware"},
        ] },
    {   // g l -> Sublimelint show all errors
        "command": "sublimelinter_show_all_errors",
        "keys": ["g", "L"],
        "context": [
            {"key": "vi_command_mode_aware"},
        ] },
    {   // g l -> anaconda next lint error
        "command": "anaconda_next_lint_error",
        "keys": ["g", "l"],
        "context": [
            {"key": "selector", "operand": "source.python" },
            {"key": "vi_command_mode_aware" }
            ]
        },
    {   // g L -> anaconda List lint errors
        "command": "anaconda_get_lines",
        "keys": ["g", "L"],
        "context": [
            {"key": "selector", "operand": "source.python" },
            {"key": "vi_command_mode_aware" } ]
        },

    {   // ctrl+shift+8 -> Anaconda PEP8 autoformat
        "command": "anaconda_auto_format",
        "keys": ["ctrl+shift+8"],
        },

    // {   // pageup -> fold go to paren
    //     "keys": ["pageup"], "command": "fold_go_to_parent" },
    // {   // pagedown -> fold go to children
    //     "keys": ["pagedown"], "command": "fold_go_to_children" },
    {   // ctrl+k -> fold go_to sibling up
        "keys": ["ctrl+k"], "command": "fold_go_to_sibling_up",
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // ctrl+j -> fold go_to sibling dow
        "keys": ["ctrl+j"], "command": "fold_go_to_sibling_down" ,
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // ctrl+h -> fold fold conten
        "keys": ["ctrl+h"], "command": "fold_fold_content" ,
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // ctrl+l -> fold unfold conten
        "keys": ["ctrl+l"], "command": "fold_unfold_content" ,
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // ctrl+space -> fold go to sibling
        "keys": ["ctrl+space"], "command": "fold_go_to_siblings" },
    {   // ctrl+alt+h -> fold show documentatio
        "keys": ["ctrl+alt+h"], "command": "fold_show_documentation" },
    {   // alt+0 -> fold fold depth
        "keys": ["alt+0"], "command": "fold_fold_depth", "args": {"depth": 0} },
    {   // alt+1 -> fold fold depth
        "keys": ["alt+1"], "command": "fold_fold_depth", "args": {"depth": 1} },
    {   // alt+2 -> fold fold depth
        "keys": ["alt+2"], "command": "fold_fold_depth", "args": {"depth": 2} },
    {   // alt+3 -> fold fold depth
        "keys": ["alt+3"], "command": "fold_fold_depth", "args": {"depth": 3} },

    {   // g i -> go to import (Python)
        "keys": ["g","i"], "command": "fold_go_to_import",
        "context": [
            {"key": "selector", "operand": "source.python" },
            {"key": "vi_command_mode_aware" }
        ]
        },
    {   // g f -> fold quick panel
        "keys": ["g","f"], "command": "fold_go_to_quick_panel",
         "context": [ {"key": "vi_command_mode_aware" } ]
        },

    {   // EasyMotion with ctrl+g
        "keys": ["ctrl+g"],
        "command": "NULL" },
    {   // EasyMotion with ctrl+g
        "keys": ["ctrl+g", "<character>"],
        "command": "easy_motion",
        "args": { "select_text": false }, },
    {   // g t -> EasyMotion
        "keys": ["g", "t", "<character>"],
        "command": "easy_motion",
        "args": { "select_text": true },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // g t -> enter EasyMotion
        "keys": ["g", "t", "enter"],
        "command": "easy_motion",
        "args": { "select_text": true, "character": "enter" },
        "context": [{ "key": "vi_command_mode_aware" }] },
    {   // g t -> in visual mode
        "keys": ["g", "t", "<character>"],
        "command": "easy_motion",
        "args": { "select_text": false },
        "context": [
            { "key": "vi_mode_visual", "operand": false },
            { "key": "vi_mode_visual_line", "operand": false },
            { "key": "vi_command_mode_aware" }] },
    {   // gt enter-> " in visual mode
        "keys": ["g", "t", "enter"],
        "command": "easy_motion",
        "args": { "select_text": false, "character": "enter" },
        "context": [
            { "key": "vi_mode_visual", "operand": false },
            { "key": "vi_mode_visual_line", "operand": false },
            { "key": "vi_command_mode_aware" }] },

    {   // ii exits visual mode
        "keys": ["i","i"],
        "command": "press_key", "args": { "key": "v" },
        "context": [ { "key": "vi_mode_visual", "operand": true },] },

    {   // cc exits visual mode
        "keys": ["c","c"],
        "command": "press_key", "args": { "key": "C" },
        "context": [ { "key": "vi_mode_visual", "operand": true },] },

    {   // aa exits visual mode
        "keys": ["a","a"],
        "command": "press_key", "args": { "key": "A" },
        "context": [ { "key": "vi_mode_visual", "operand": true },] },

    {   // ctrl+enter in normal mode inserts linebreak after
        "keys": ["ctrl+enter"],
        "command": "ex_substitute",
        "args": {
            "line_range": {
                "left_offset": null,
                "left_ref": null,
                "left_search_offsets": [ ],
                "right_offset": null,
                "right_ref": null,
                "right_search_offsets": [ ],
                "separator": null,
                "text_range": "" },
            "pattern": "/^/\\n/" },
        "context": [
            { "key": "vi_command_mode_aware" },
            { "key": "vi_mode_visual", "operand": false } ] },

    {   // ctrl+shift+enter in normal mode inserts linebreak before
        "keys": ["ctrl+shift+enter"],
        "command": "ex_substitute",
        "args": {
            "line_range": {
                "left_offset": null,
                "left_ref": null,
                "left_search_offsets": [ ],
                "right_offset": null,
                "right_ref": null,
                "right_search_offsets": [ ],
                "separator": null,
                "text_range": "" },
            "pattern": "/^/\\n/" },
        "context": [
            { "key": "vi_command_mode_aware" },
            { "key": "vi_mode_visual", "operand": false } ] },

    {   // tab out of autocompleted quotes etc.
       "keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true},
       "context": [
            { "key": "following_text", "operator": "regex_contains", "operand": "^[)\\]'\"]", "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "[(['\"]", "match_all": true },
            { "key": "auto_complete_visible", "operator": "equal", "operand": false } ] },
    {
        "keys": ["tab"],
        "command": "insert_best_completion",
        "args": {"default": "\t", "exact": true},
        "context": [
            { "key": "vi_insert_mode_aware" }, ] },

    {
        "keys": ["tab"],
        "command": "insert_best_completion",
        "args": {"default": "\t", "exact": false},
        "context": [
            { "key": "vi_insert_mode_aware" },
            { "key": "setting.tab_completion",
            "operator": "equal", "operand": true } ] },

    {
        "keys": ["tab"],
        "command": "next_field",
        "context": [
            { "key": "has_next_field",
            "operator": "equal", "operand": true },
            { "key": "auto_complete_visible",
            "operator": "equal", "operand": false } ] },

    {   // tab always cycles autocomplete!
        "keys": ["tab"],
        "command": "replace_completion_with_next_completion",
        "context": [
            { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
            { "key": "setting.tab_completion", "operator": "equal", "operand": true } ] },

    {   // shift+tab goes back to autocomplete.
        "keys": ["shift+tab"],
        "command": "replace_completion_with_auto_complete",
        "context": [
            { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
            { "key": "setting.tab_completion", "operator": "equal", "operand": true } ] },
]
